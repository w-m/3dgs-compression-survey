
/*
from https://github.com/timothygebhard/js-colormaps
 */

const data = {"summer": {"interpolate": true, "colors": [[0.0, 0.5, 0.4], [0.0039, 0.502, 0.4], [0.0078, 0.5039, 0.4], [0.0118, 0.5059, 0.4], [0.0157, 0.5078, 0.4], [0.0196, 0.5098, 0.4], [0.0235, 0.5118, 0.4], [0.0275, 0.5137, 0.4], [0.0314, 0.5157, 0.4], [0.0353, 0.5176, 0.4], [0.0392, 0.5196, 0.4], [0.0431, 0.5216, 0.4], [0.0471, 0.5235, 0.4], [0.051, 0.5255, 0.4], [0.0549, 0.5275, 0.4], [0.0588, 0.5294, 0.4], [0.0627, 0.5314, 0.4], [0.0667, 0.5333, 0.4], [0.0706, 0.5353, 0.4], [0.0745, 0.5373, 0.4], [0.0784, 0.5392, 0.4], [0.0824, 0.5412, 0.4], [0.0863, 0.5431, 0.4], [0.0902, 0.5451, 0.4], [0.0941, 0.5471, 0.4], [0.098, 0.549, 0.4], [0.102, 0.551, 0.4], [0.1059, 0.5529, 0.4], [0.1098, 0.5549, 0.4], [0.1137, 0.5569, 0.4], [0.1176, 0.5588, 0.4], [0.1216, 0.5608, 0.4], [0.1255, 0.5627, 0.4], [0.1294, 0.5647, 0.4], [0.1333, 0.5667, 0.4], [0.1373, 0.5686, 0.4], [0.1412, 0.5706, 0.4], [0.1451, 0.5725, 0.4], [0.149, 0.5745, 0.4], [0.1529, 0.5765, 0.4], [0.1569, 0.5784, 0.4], [0.1608, 0.5804, 0.4], [0.1647, 0.5824, 0.4], [0.1686, 0.5843, 0.4], [0.1725, 0.5863, 0.4], [0.1765, 0.5882, 0.4], [0.1804, 0.5902, 0.4], [0.1843, 0.5922, 0.4], [0.1882, 0.5941, 0.4], [0.1922, 0.5961, 0.4], [0.1961, 0.598, 0.4], [0.2, 0.6, 0.4], [0.2039, 0.602, 0.4], [0.2078, 0.6039, 0.4], [0.2118, 0.6059, 0.4], [0.2157, 0.6078, 0.4], [0.2196, 0.6098, 0.4], [0.2235, 0.6118, 0.4], [0.2275, 0.6137, 0.4], [0.2314, 0.6157, 0.4], [0.2353, 0.6176, 0.4], [0.2392, 0.6196, 0.4], [0.2431, 0.6216, 0.4], [0.2471, 0.6235, 0.4], [0.251, 0.6255, 0.4], [0.2549, 0.6275, 0.4], [0.2588, 0.6294, 0.4], [0.2627, 0.6314, 0.4], [0.2667, 0.6333, 0.4], [0.2706, 0.6353, 0.4], [0.2745, 0.6373, 0.4], [0.2784, 0.6392, 0.4], [0.2824, 0.6412, 0.4], [0.2863, 0.6431, 0.4], [0.2902, 0.6451, 0.4], [0.2941, 0.6471, 0.4], [0.298, 0.649, 0.4], [0.302, 0.651, 0.4], [0.3059, 0.6529, 0.4], [0.3098, 0.6549, 0.4], [0.3137, 0.6569, 0.4], [0.3176, 0.6588, 0.4], [0.3216, 0.6608, 0.4], [0.3255, 0.6627, 0.4], [0.3294, 0.6647, 0.4], [0.3333, 0.6667, 0.4], [0.3373, 0.6686, 0.4], [0.3412, 0.6706, 0.4], [0.3451, 0.6725, 0.4], [0.349, 0.6745, 0.4], [0.3529, 0.6765, 0.4], [0.3569, 0.6784, 0.4], [0.3608, 0.6804, 0.4], [0.3647, 0.6824, 0.4], [0.3686, 0.6843, 0.4], [0.3725, 0.6863, 0.4], [0.3765, 0.6882, 0.4], [0.3804, 0.6902, 0.4], [0.3843, 0.6922, 0.4], [0.3882, 0.6941, 0.4], [0.3922, 0.6961, 0.4], [0.3961, 0.698, 0.4], [0.4, 0.7, 0.4], [0.4039, 0.702, 0.4], [0.4078, 0.7039, 0.4], [0.4118, 0.7059, 0.4], [0.4157, 0.7078, 0.4], [0.4196, 0.7098, 0.4], [0.4235, 0.7118, 0.4], [0.4275, 0.7137, 0.4], [0.4314, 0.7157, 0.4], [0.4353, 0.7176, 0.4], [0.4392, 0.7196, 0.4], [0.4431, 0.7216, 0.4], [0.4471, 0.7235, 0.4], [0.451, 0.7255, 0.4], [0.4549, 0.7275, 0.4], [0.4588, 0.7294, 0.4], [0.4627, 0.7314, 0.4], [0.4667, 0.7333, 0.4], [0.4706, 0.7353, 0.4], [0.4745, 0.7373, 0.4], [0.4784, 0.7392, 0.4], [0.4824, 0.7412, 0.4], [0.4863, 0.7431, 0.4], [0.4902, 0.7451, 0.4], [0.4941, 0.7471, 0.4], [0.498, 0.749, 0.4], [0.502, 0.751, 0.4], [0.5059, 0.7529, 0.4], [0.5098, 0.7549, 0.4], [0.5137, 0.7569, 0.4], [0.5176, 0.7588, 0.4], [0.5216, 0.7608, 0.4], [0.5255, 0.7627, 0.4], [0.5294, 0.7647, 0.4], [0.5333, 0.7667, 0.4], [0.5373, 0.7686, 0.4], [0.5412, 0.7706, 0.4], [0.5451, 0.7725, 0.4], [0.549, 0.7745, 0.4], [0.5529, 0.7765, 0.4], [0.5569, 0.7784, 0.4], [0.5608, 0.7804, 0.4], [0.5647, 0.7824, 0.4], [0.5686, 0.7843, 0.4], [0.5725, 0.7863, 0.4], [0.5765, 0.7882, 0.4], [0.5804, 0.7902, 0.4], [0.5843, 0.7922, 0.4], [0.5882, 0.7941, 0.4], [0.5922, 0.7961, 0.4], [0.5961, 0.798, 0.4], [0.6, 0.8, 0.4], [0.6039, 0.802, 0.4], [0.6078, 0.8039, 0.4], [0.6118, 0.8059, 0.4], [0.6157, 0.8078, 0.4], [0.6196, 0.8098, 0.4], [0.6235, 0.8118, 0.4], [0.6275, 0.8137, 0.4], [0.6314, 0.8157, 0.4], [0.6353, 0.8176, 0.4], [0.6392, 0.8196, 0.4], [0.6431, 0.8216, 0.4], [0.6471, 0.8235, 0.4], [0.651, 0.8255, 0.4], [0.6549, 0.8275, 0.4], [0.6588, 0.8294, 0.4], [0.6627, 0.8314, 0.4], [0.6667, 0.8333, 0.4], [0.6706, 0.8353, 0.4], [0.6745, 0.8373, 0.4], [0.6784, 0.8392, 0.4], [0.6824, 0.8412, 0.4], [0.6863, 0.8431, 0.4], [0.6902, 0.8451, 0.4], [0.6941, 0.8471, 0.4], [0.698, 0.849, 0.4], [0.702, 0.851, 0.4], [0.7059, 0.8529, 0.4], [0.7098, 0.8549, 0.4], [0.7137, 0.8569, 0.4], [0.7176, 0.8588, 0.4], [0.7216, 0.8608, 0.4], [0.7255, 0.8627, 0.4], [0.7294, 0.8647, 0.4], [0.7333, 0.8667, 0.4], [0.7373, 0.8686, 0.4], [0.7412, 0.8706, 0.4], [0.7451, 0.8725, 0.4], [0.749, 0.8745, 0.4], [0.7529, 0.8765, 0.4], [0.7569, 0.8784, 0.4], [0.7608, 0.8804, 0.4], [0.7647, 0.8824, 0.4], [0.7686, 0.8843, 0.4], [0.7725, 0.8863, 0.4], [0.7765, 0.8882, 0.4], [0.7804, 0.8902, 0.4], [0.7843, 0.8922, 0.4], [0.7882, 0.8941, 0.4], [0.7922, 0.8961, 0.4], [0.7961, 0.898, 0.4], [0.8, 0.9, 0.4], [0.8039, 0.902, 0.4], [0.8078, 0.9039, 0.4], [0.8118, 0.9059, 0.4], [0.8157, 0.9078, 0.4], [0.8196, 0.9098, 0.4], [0.8235, 0.9118, 0.4], [0.8275, 0.9137, 0.4], [0.8314, 0.9157, 0.4], [0.8353, 0.9176, 0.4], [0.8392, 0.9196, 0.4], [0.8431, 0.9216, 0.4], [0.8471, 0.9235, 0.4], [0.851, 0.9255, 0.4], [0.8549, 0.9275, 0.4], [0.8588, 0.9294, 0.4], [0.8627, 0.9314, 0.4], [0.8667, 0.9333, 0.4], [0.8706, 0.9353, 0.4], [0.8745, 0.9373, 0.4], [0.8784, 0.9392, 0.4], [0.8824, 0.9412, 0.4], [0.8863, 0.9431, 0.4], [0.8902, 0.9451, 0.4], [0.8941, 0.9471, 0.4], [0.898, 0.949, 0.4], [0.902, 0.951, 0.4], [0.9059, 0.9529, 0.4], [0.9098, 0.9549, 0.4], [0.9137, 0.9569, 0.4], [0.9176, 0.9588, 0.4], [0.9216, 0.9608, 0.4], [0.9255, 0.9627, 0.4], [0.9294, 0.9647, 0.4], [0.9333, 0.9667, 0.4], [0.9373, 0.9686, 0.4], [0.9412, 0.9706, 0.4], [0.9451, 0.9725, 0.4], [0.949, 0.9745, 0.4], [0.9529, 0.9765, 0.4], [0.9569, 0.9784, 0.4], [0.9608, 0.9804, 0.4], [0.9647, 0.9824, 0.4], [0.9686, 0.9843, 0.4], [0.9725, 0.9863, 0.4], [0.9765, 0.9882, 0.4], [0.9804, 0.9902, 0.4], [0.9843, 0.9922, 0.4], [0.9882, 0.9941, 0.4], [0.9922, 0.9961, 0.4], [0.9961, 0.998, 0.4], [1.0, 1.0, 0.4]]}};

const summer = partial('summer');
const summer_r = partial('summer_r');


/*
Define auxiliary functions for evaluating colormaps
 */

function evaluate_cmap(x, name, reverse) {
  /**
   * Evaluate colormap `name` at some value `x`.
   * @param {number} x - The value (between 0 and 1) at which to evaluate the colormap.
   * @param {string} name - The name of the colormap (see matplotlib documentation).
   * @reverse {boolean} reverse - Whether or not to reverse the colormap.
   * @return {list} - A 3-tuple (R, G, B) containing the color assigned to `x`.
   */

  // Ensure that the value of `x` is valid (i.e., 0 <= x <= 1)
  if (!(0 <= x  && x <= 1)) {
    alert('Illegal value for x! Must be in [0, 1].')
  }

  // Ensure that `name` is a valid colormap
  if (!(name in data)) {
    alert('Colormap ' + name + 'does not exist!');
  }

  // We can get the reverse colormap by evaluating colormap(1-x)
  if (reverse === true) {
    x = 1 - x;
  }

  // Get the colors and whether or not we need to interpolate
  let colors = data[name]['colors'];
  let interpolate = data[name]['interpolate'];

  if (interpolate === true) {
    return interpolated(x, colors);
  } else {
    return qualitative(x, colors);
  }
}

function interpolated(x, colors) {
  let lo = Math.floor(x * (colors.length - 1));
  let hi = Math.ceil(x * (colors.length - 1));
  let r = Math.round((colors[lo][0] + colors[hi][0]) / 2 * 255);
  let g = Math.round((colors[lo][1] + colors[hi][1]) / 2 * 255);
  let b = Math.round((colors[lo][2] + colors[hi][2]) / 2 * 255);
  return [r, g, b];
}

function qualitative(x, colors) {
  let idx = 0;
  while (x > (idx + 1) / (colors.length - 0) ) { idx++; }
  let r = Math.round(colors[idx][0] * 255);
  let g = Math.round(colors[idx][1] * 255);
  let b = Math.round(colors[idx][2] * 255);
  return [r, g, b];
}

function partial(name) {
  if (name.endsWith('_r')) {
    return function(x) { return evaluate_cmap(x, name.substring(0, name.length - 2), true) };
  } else {
    return function(x) { return evaluate_cmap(x, name, false) };
  }

}
